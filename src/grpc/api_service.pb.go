// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api_service.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Log message structure
type PLogMessage struct {
	Category             string   `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PLogMessage) Reset()         { *m = PLogMessage{} }
func (m *PLogMessage) String() string { return proto.CompactTextString(m) }
func (*PLogMessage) ProtoMessage()    {}
func (*PLogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1f622be3e5824, []int{0}
}

func (m *PLogMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PLogMessage.Unmarshal(m, b)
}
func (m *PLogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PLogMessage.Marshal(b, m, deterministic)
}
func (m *PLogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PLogMessage.Merge(m, src)
}
func (m *PLogMessage) XXX_Size() int {
	return xxx_messageInfo_PLogMessage.Size(m)
}
func (m *PLogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PLogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PLogMessage proto.InternalMessageInfo

func (m *PLogMessage) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *PLogMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PLogResult struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	NumSuccess           int32    `protobuf:"varint,2,opt,name=numSuccess,proto3" json:"numSuccess,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PLogResult) Reset()         { *m = PLogResult{} }
func (m *PLogResult) String() string { return proto.CompactTextString(m) }
func (*PLogResult) ProtoMessage()    {}
func (*PLogResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1f622be3e5824, []int{1}
}

func (m *PLogResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PLogResult.Unmarshal(m, b)
}
func (m *PLogResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PLogResult.Marshal(b, m, deterministic)
}
func (m *PLogResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PLogResult.Merge(m, src)
}
func (m *PLogResult) XXX_Size() int {
	return xxx_messageInfo_PLogResult.Size(m)
}
func (m *PLogResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PLogResult.DiscardUnknown(m)
}

var xxx_messageInfo_PLogResult proto.InternalMessageInfo

func (m *PLogResult) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PLogResult) GetNumSuccess() int32 {
	if m != nil {
		return m.NumSuccess
	}
	return 0
}

func (m *PLogResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*PLogMessage)(nil), "PLogMessage")
	proto.RegisterType((*PLogResult)(nil), "PLogResult")
}

func init() { proto.RegisterFile("api_service.proto", fileDescriptor_dac1f622be3e5824) }

var fileDescriptor_dac1f622be3e5824 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x80, 0x89, 0xfd, 0xb1, 0x9d, 0x7a, 0x71, 0x91, 0x12, 0x22, 0x48, 0xe9, 0x29, 0xa7, 0x2d,
	0x28, 0xf8, 0x00, 0x16, 0xc1, 0x83, 0x82, 0x24, 0x37, 0x0f, 0xca, 0x76, 0x19, 0x87, 0xc0, 0xa6,
	0xb3, 0xec, 0x8f, 0xd0, 0x57, 0xf1, 0x69, 0x25, 0x1b, 0x2b, 0xf1, 0xa0, 0xc7, 0x6f, 0x66, 0xf8,
	0x86, 0x0f, 0xce, 0x95, 0x6d, 0xde, 0x3c, 0xba, 0x8f, 0x46, 0xa3, 0xb4, 0x8e, 0x03, 0x17, 0x97,
	0xc4, 0x4c, 0x06, 0x37, 0x89, 0x76, 0xf1, 0x7d, 0x83, 0xad, 0x0d, 0x87, 0x7e, 0xb9, 0xde, 0xc2,
	0xe2, 0xf9, 0x91, 0xe9, 0x09, 0xbd, 0x57, 0x84, 0xa2, 0x80, 0x99, 0x56, 0x01, 0x89, 0xdd, 0x21,
	0xcf, 0x56, 0x59, 0x39, 0xaf, 0x7e, 0x58, 0xe4, 0x70, 0xda, 0xf6, 0x67, 0xf9, 0x49, 0x5a, 0x1d,
	0x71, 0xfd, 0x0a, 0xd0, 0x49, 0x2a, 0xf4, 0xd1, 0x04, 0xb1, 0x84, 0xa9, 0x0f, 0x2a, 0x44, 0x9f,
	0x0c, 0x93, 0xea, 0x9b, 0xc4, 0x15, 0xc0, 0x3e, 0xb6, 0x75, 0xd4, 0x1a, 0xbd, 0x4f, 0x8a, 0x49,
	0x35, 0x98, 0x0c, 0xfd, 0xa3, 0x5f, 0xfe, 0xeb, 0xcf, 0x0c, 0x2e, 0xba, 0x07, 0x5b, 0x36, 0x06,
	0x75, 0x60, 0x57, 0xf7, 0x81, 0xe2, 0x16, 0xc6, 0xb6, 0xd9, 0x93, 0x58, 0xca, 0xbe, 0x51, 0x1e,
	0x1b, 0xe5, 0x7d, 0xd7, 0x58, 0xfc, 0x31, 0x17, 0x2b, 0x18, 0x19, 0x26, 0x71, 0x26, 0x07, 0xed,
	0xc5, 0x42, 0x0e, 0x22, 0x4a, 0x98, 0x1b, 0xa6, 0x3a, 0x38, 0x54, 0xed, 0x3f, 0x77, 0x65, 0x76,
	0x37, 0x7b, 0xc8, 0x5e, 0xc6, 0xe4, 0xac, 0xde, 0x4d, 0xd3, 0x97, 0x9b, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xae, 0xde, 0x6f, 0xf9, 0x84, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PLogCollectorServiceClient is the client API for PLogCollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PLogCollectorServiceClient interface {
	// Test if server is online.
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Send a log message to collector service.
	Log(ctx context.Context, in *PLogMessage, opts ...grpc.CallOption) (*PLogResult, error)
	// Send a log message to collector service.
	LogStream(ctx context.Context, opts ...grpc.CallOption) (PLogCollectorService_LogStreamClient, error)
}

type pLogCollectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewPLogCollectorServiceClient(cc *grpc.ClientConn) PLogCollectorServiceClient {
	return &pLogCollectorServiceClient{cc}
}

func (c *pLogCollectorServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/PLogCollectorService/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pLogCollectorServiceClient) Log(ctx context.Context, in *PLogMessage, opts ...grpc.CallOption) (*PLogResult, error) {
	out := new(PLogResult)
	err := c.cc.Invoke(ctx, "/PLogCollectorService/log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pLogCollectorServiceClient) LogStream(ctx context.Context, opts ...grpc.CallOption) (PLogCollectorService_LogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PLogCollectorService_serviceDesc.Streams[0], "/PLogCollectorService/logStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pLogCollectorServiceLogStreamClient{stream}
	return x, nil
}

type PLogCollectorService_LogStreamClient interface {
	Send(*PLogMessage) error
	CloseAndRecv() (*PLogResult, error)
	grpc.ClientStream
}

type pLogCollectorServiceLogStreamClient struct {
	grpc.ClientStream
}

func (x *pLogCollectorServiceLogStreamClient) Send(m *PLogMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pLogCollectorServiceLogStreamClient) CloseAndRecv() (*PLogResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PLogResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PLogCollectorServiceServer is the server API for PLogCollectorService service.
type PLogCollectorServiceServer interface {
	// Test if server is online.
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// Send a log message to collector service.
	Log(context.Context, *PLogMessage) (*PLogResult, error)
	// Send a log message to collector service.
	LogStream(PLogCollectorService_LogStreamServer) error
}

// UnimplementedPLogCollectorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPLogCollectorServiceServer struct {
}

func (*UnimplementedPLogCollectorServiceServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedPLogCollectorServiceServer) Log(ctx context.Context, req *PLogMessage) (*PLogResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (*UnimplementedPLogCollectorServiceServer) LogStream(srv PLogCollectorService_LogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LogStream not implemented")
}

func RegisterPLogCollectorServiceServer(s *grpc.Server, srv PLogCollectorServiceServer) {
	s.RegisterService(&_PLogCollectorService_serviceDesc, srv)
}

func _PLogCollectorService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PLogCollectorServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PLogCollectorService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PLogCollectorServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PLogCollectorService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PLogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PLogCollectorServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PLogCollectorService/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PLogCollectorServiceServer).Log(ctx, req.(*PLogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PLogCollectorService_LogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PLogCollectorServiceServer).LogStream(&pLogCollectorServiceLogStreamServer{stream})
}

type PLogCollectorService_LogStreamServer interface {
	SendAndClose(*PLogResult) error
	Recv() (*PLogMessage, error)
	grpc.ServerStream
}

type pLogCollectorServiceLogStreamServer struct {
	grpc.ServerStream
}

func (x *pLogCollectorServiceLogStreamServer) SendAndClose(m *PLogResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pLogCollectorServiceLogStreamServer) Recv() (*PLogMessage, error) {
	m := new(PLogMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PLogCollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PLogCollectorService",
	HandlerType: (*PLogCollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _PLogCollectorService_Ping_Handler,
		},
		{
			MethodName: "log",
			Handler:    _PLogCollectorService_Log_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "logStream",
			Handler:       _PLogCollectorService_LogStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api_service.proto",
}
